Starting code feedback for Yew Shen, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.58 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week3, .git, Feedback, Week1, Week2

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
# Whitelist
!.gitkeep
!README.md
!.gitignore
!/Code

# Blacklist
*~
*.tmp
#comment
*.py[co]
Sandbox
Results
.vscode
*.pdf
*~
*.aux
*.dvi
*.log
*.nav
*.out
*.snm
*.toc
Week2/Data/JustOaksData.csv
Week2/Data/bodymass.csv

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE Coursework Repository

*Author: Yewshen Lim*

*Created: Oct 2020*

This repository contains all the work attempted by Yewshen within "The Multilingual Quantitative Biologist" book which is taught in the first term of the CMEE Course.

Visitors who wish to attempt the coursework can refer to https://mhasoba.github.io/TheMulQuaBio/intro.html

Each individual subdirectory will contain their own READMEs detailing the contents within the week. Also located within each subdirectories are another 3 subdirectories /Code, /Results and /Data. /Code contains the scripts, /Results contains the output from the scripts and /Data contains input files for the scripts. One point to highlight is that if input files are only manipulated (e.g. changing file type and/or replacing separators), the output remains in /Data. Outputs are only directed to /Results when the input files were processed (e.g. generating a graph from a dataset).

## Table of Contents
1. Week 1: UNIX and Linux, shell scripting, git and Latex
2. Week 2: Biological Computing in Python:w


**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: Week1, Week2, Week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: Data, Code, Results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Week 2

*Author: Yewshen Lim*

*Created: Week 2*

This directory contains the scripts, data and results from week 2.

Languages used in this week:
1. Python

Requirements:
1. Python 3

## Scripts

Scripts are separated into two sections, personal and groupwork

## Personal

### 1. `basic_io1.py`

Script illustrates basic input

### 2. `basic_io2.py`

Script illustrates basic output

### 3. `basic_io3.py`

Script illustrates basic storage of objects

### 4. `basic_csv.py`

Script illustates the manipulation of csv files

### 5. `cfexercises1.py`

Control flow exercise 1, modified into a module

### 6. `loops.py`

Script illustrates for and while loops

### 7. `cfexercises2.py`

Script illustrates loops and conditionals combined

### 8. `oaks.py`

Script finds just taxa that are oak trees from a list of species using both loops and list comprehension

### 9. `scope.py`

Script illustrates variable scope, local and global. Variables inside functions arn invisible outside of it, nor do they persist once the function has run. These are called local variables, and are only accessible inside their function. However, "global variables" are visible inside and outside of functions.

### 10. `boilerplate.py`

Script contains sections of code that have to be included in many places with little or no alteration.

### 11. `using_name.py`

Script illustrates '__name__ == "__main__"'. This line directs the python interpreter to set the special __name__ variable to have a value "__main__", so that the file is usable as a script as well as an importable module. On the other hand, if some other module is the main program and your module is being imported, the interpreter looks at the filename of your module, strips off the .py and assigns that string to the module's __name__ variable instead and skips the command(s) under the if statement.

### 12. `sysargv.py`

Script showing argv is the 'argument variable'. Such variables are necessarily very common across programming languages, and play an important role - argv is a variable that holds the arguments passed to the script when it's ran.

### 13. `control_flow.py`

Script shows some functions exemplifying the use of control statements

### 14. `lc1.py`

Script uses loops and list comprehension to create three different sets of lists each, containing the latin names, common names and mean body masses for each species in the given tuple.

### 15. `lc2.py`

Script uses list comprehension and loops to create (1) lists of month and rainfall tuples where the amount of rain was greater than 100 mm, (2) list of just month names where the amount of rain was less than 50 mm.

### 16. `dictionary.py`

Script populates a dictionary called taxa_dic derived from taxa so that it order names to set of taxa.

### 17. `tuple.py`

Script prints latin name, common name and mass on separate lines or output block by species from a tuple.

### 18. `test_control_flow.py`

Some functions exemplifying the use of control statements

### 19. `debugme.py`

Example of debugging on a script

### 20. `align_seqs.py`

Script takes DNA sequences as input from a single external file and aligns two DNA sequences such that they are as similar as possible. The best alignment, along with its corresponding score is then saved in a text file to the /Results/ directory.
Also for practicing debugging via insertion of breakpoints.

Script starts by positioning the beginning of the shorter sequence at all positions (bases) of the longer one (the start position), and count the number of bases matched. The alignment with the highest score wins. Ties are possible, in which case, an arbitrary alignment (e.g. first or last) with the highest score is taken.

### 21. `oaks_debugme.py`

Debug practice, where the bug prevents oaks from being found. Debug by writing doctests.

## Groupwork

### 1. `align_seqs_fasta.py`

Improvement to align_seqs.py, where this script should take any two fasta sequences (in separate files) to be aligned as input. Would typically run using explicit inputs, but should still run if no inputs were given, using two fasta sequences from the /Data/ directory as defaults.

### 2. `align_seqs_better.py`

Improvement to align_seqs_fasta.py, where this script keeps multiple alignments if they equal in score to the best score. Outputs are saved to the /Results/ directory.

### 3. `oaks_debugme.py` (Same file as the above, no. 21)
**********************************************************************

Found following files in results directory: align_seqs_out.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 99.5

Found 21 code files: tuple.py, boilerplate.py, basic_io2.py, oaks.py, cfexercises2.py, basic_io1.py, oaks_debugme.py, loops.py, dictionary.py, lc2.py, basic_io3.py, control_flow.py, cfexercises1.py, test_control_flow.py, basic_csv.py, debugme.py, align_seqs.py, sysargv.py, scope.py, lc1.py, using_name.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script to print latin name, common name and mass on separate line or output 
block by species
"""

__appname__ = '[tuple.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk'
__version__ = '0.0.1'
__license__ = ""

## Imports ##
import sys

## Constants ##
 
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

## Functions ##

def list_out(x = birds):
    """
    Uses a for loop to print latin names, common names and mass
    """
    for row in x:
        print("Latin name: " + row[0])
        print("Common name: " + row[1])
        print("Mass: " + row[2])
        print()

# Attempt list comprehension when free

def main(argv):
    """
    Prints function with argument bird
    """
    print(list_out(birds))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)


**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
Latin name: Passerculus sandwichensis
Common name: Savannah sparrow

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "tuple.py", line 47, in <module>
    status = main(sys.argv)
  File "tuple.py", line 43, in main
    print(list_out(birds))
  File "tuple.py", line 34, in list_out
    print("Mass: " + row[2])
TypeError: can only concatenate str (not "float") to str

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Description of this program or application.
You can use several lines
"""

__appname__ = '[boilerplate.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## Imports ##
import sys # module to interface our program with the operating system

## Constants ##


## Functions ##
def main(argv):
    """
    Main entry point of the program
    """
    print('This is a boilerplate') # Note: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__":
    """
    Makes sure the "main" function is called from command line
    """
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.07125s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script illustrates basic output
"""

__appname__ = '[basic_io2.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'

#################################
# FILE OUPUT
#################################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../Sandbox/testout.txt', 'w')
for i in list_to_save:
    f.write(str(i) + '\n')  ## oadd a new line at the end

f.close()
**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "basic_io2.py", line 17, in <module>
    f = open('../Sandbox/testout.txt', 'w')
FileNotFoundError: [Errno 2] No such file or directory: '../Sandbox/testout.txt'

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Finds just taxa that aro oak trees from a list of species using both loops and
list comprehension
"""

__appname__ = '[oaks.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    """
    Returns True if name starts with 'quercus'
    """
    return name.lower().startswith('quercus ')

## Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

## Using list comprehensions
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

## Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

## Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)

**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
{'Quercus cerris', 'Quercus petraea', 'Quercus robur'}
{'Quercus cerris', 'Quercus petraea', 'Quercus robur'}
{'QUERCUS CERRIS', 'QUERCUS PETRAEA', 'QUERCUS ROBUR'}
{'QUERCUS CERRIS', 'QUERCUS PETRAEA', 'QUERCUS ROBUR'}

**********************************************************************

Code ran without errors

Time consumed = 0.06842s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script illustrates the use of loop and conditionals
"""

__appname__ = '[cfexercises2.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'

for j in range(12):
    if j % 3 == 0:
        print('hello')
# prints 4 hellos

for j in range(15):
    if j % 5 == 3:
        print('hello')
    elif j % 4 == 3:
        print('hello')
# prints 5 hellos

z = 0
while z != 15:
    print('hello')
    z = z + 3
# prints 5 hellos

z = 12
while z < 100:
    if z == 31:
        for k in range(7):
            print('hello')
    elif z == 18:
        print('hello')
    z = z + 1
# prints 8 hellos
**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.10184s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script illustrates basic input
"""

__appname__ = '[basic_io1.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'

#################################
# FILE INPUT
#################################
# Open file for reading
f = open('../Sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../Sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()
**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "basic_io1.py", line 15, in <module>
    f = open('../Sandbox/test.txt', 'r')
FileNotFoundError: [Errno 2] No such file or directory: '../Sandbox/test.txt'

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Debug practice, where the bug prevents oaks from being found
Debug by writing doctests
"""

__appname__ = '[oaks_debugme.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = ""

## Imports ##

import csv
import sys
import doctest

## Functions ##

#Define function
def is_an_oak(name):
    """ 
    Returns True if name starts with 'quercus' 
    
    >>> is_an_oak('Fagus sylvatica')
    False

    >>> is_an_oak('Querrcus robur')
    False

    >>> is_an_oak('Quercus robur')
    True
    
    """
    return name.lower().startswith('quercus')
    # only accepts quercus, filters out typos

def main(argv):
    """
    Opens and reads TestOaksData.csv, opens JustOaksData.csv for writing
    Checks if species in TestOaksData.csv are from the genus quercus, and writes
    them to JustOaksData.csv if they are.
    """
    f = open('../Data/TestOaksData.csv','r')
    g = open('../Data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    # oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        print(is_an_oak(row[0]))
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])
    f.close()
    g.close()

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)
    # sys.exit(status)

doctest.testmod() # To run with embedded tests
**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
['Genus', ' species']
The genus is: 
Genus

False
['Quercus', ' robur']
The genus is: 
Quercus

True
FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

False
['Pinus', ' sylvestris']
The genus is: 
Pinus

False
['Quercus', ' cerris']
The genus is: 
Quercus

True
FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

True
FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.20400s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script illustrates for and while loops
"""

__appname__ = '[loops.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'

# FOR loops in python
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops in python
z = 0
while z < 100:
    z = z + 1
    print(z)

b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")
# ctrl + c to stop!

**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 10.60738s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script populates a dictionary called taxa_dic derived from taxa so that it maps 
order names to set of taxa.
"""

__appname__ = '[dictionary.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk'
__version__ = '0.0.1'
__license__ = ""

## Imports ##
import sys

## Constants ##

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

## Functions ##

def make_di(x=taxa):
        """
        Makes a dictionary
        """
        di = {}
        for i, j in x:
                di[j] = di.get(j, ()) + (i,)
        return di

def main(argv):
        """
        Makes a dictionary from taxa, a list
        """
        print(make_di(taxa))
        return 0

if (__name__ == "__main__"):
        status = main(sys.argv)
        sys.exit(status)
**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': ('Myotis lucifugus',), 'Rodentia': ('Gerbillus henleyi', 'Peromyscus crinitus', 'Mus domesticus', 'Cleithrionomys rutilus'), 'Afrosoricida': ('Microgale dobsoni', 'Microgale talazaci'), 'Carnivora': ('Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus')}

**********************************************************************

Code ran without errors

Time consumed = 0.15633s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
(1) Use a list comprehension to create a list of month, rainfall tuples where
the amount of rain was greater than 100 mm.
 
(2) Use a list comprehension to create a list of just month names where the
amount of rain was less than 50 mm. 

(3) Now do (1) and (2) using conventional loops (you can choose to do 
this before 1 and 2 !). 
"""

__appname__ = '[lc2.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk'
__version__ = '0.0.1'
__license__ = ""

## Imports ##
import sys

## Constants ##

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

## Functions ##

def more_than_100_loop(x = rainfall):
    """
    Populates a list with month and rainfall tuples where the amount of rain 
    was greater than 100 mm, using a for loop and conditional
    """
    months = [] # create empty list
    for row in x: # loop through rows in x
        if row[1] > 100: # condition
            months.append(row) # if condition satistied, append row to months list
    return months

def less_than_50_loop(x = rainfall):
    """
    Populates a list with month names where the amount of rain was less than 
    50 mm, using a for loop and conditional
    """
    months = []
    for row in x:
        if row[1] < 50:
            months.append(row[0])
    return months

def more_than_100_lc(x = rainfall):
    """
    Populates a list with month and rainfall tuples where the amount of rain 
    was greater than 100 mm, using list comprehension
    """
    months = [row for row in x if row[1] > 100]
    return months

def less_than_50_lc(x = rainfall):
    """
    Populates a list with month names where the amount of rain was less than 
    50 mm, using list comprehension
    """
    months = [row[0] for row in x if row[1] < 50]
    return months

def main(argv):
    """
    Prints each of the functions with argument rainfall
    """
    print(more_than_100_loop(rainfall))
    print(less_than_50_loop(rainfall))
    print(more_than_100_lc(rainfall))
    print(less_than_50_lc(rainfall))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.07942s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script illustates basic storage of objects
"""

__appname__ = '[basic_io3.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'

#################################
# STORING OBJECTS 
#################################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle
f = open('../Sandbox/testp.p', 'wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../Sandbox/testp.p', 'rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)
**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "basic_io3.py", line 18, in <module>
    f = open('../Sandbox/testp.p', 'wb') ## note the b: accept binary files
FileNotFoundError: [Errno 2] No such file or directory: '../Sandbox/testp.p'

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Some functions exemplifying the use of control statements
"""

__appname__ = '[control_flow.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## Imports ##
import sys # module to interface our program with the operating system

## Constants ##


## Functions ##
def even_or_odd(x=0): # if not specified, x should take value 0
    """
    Find whether a number x is even or odd.
    """
    if x % 2 == 0: # the conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    """
    Find which is the largest divisor of x amont 2,3,4,5.
    """
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: # means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # when all other (if, elif) conditions are not met
        return "No divisor found for %d!" % x # each function can return a value or a variable
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """
    Find whether an integer is prime.
    """
    for i in range(2,x): # "range" returns a sequence of integers
        if x % i == 0:
            print("%d is not a prime: %d is a divisor" % (x, i))
            return False
    print("%d is a prime!" % x)
    return True

def find_all_primes(x=22):
    """
    Find all the primes up to x
    """
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes
    
    # lc version:
    # allprimes = [i for i in range(2, x + 1) if is_prime(i)]
    # print("There are %d primes between 2 and %d" % (len(allprimes), x))

def main(argv):
    """
    Prints each of the functions with arguments provided
    """
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.09780s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Basic control flow. 
Modification to original cfexercises1.py to turn it into a module like
control_flow.py
Also added test arguments to show that they work
"""

__appname__ = '[cfexercises1.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = ""

## Imports ##
import sys # module to interface our program with the OS

## Constants ##

## Functions ##

# What does each of foo_x do?
def foo_1(x=4):
    """
    Multiply x by 0.5 / square root x
    """
    return x ** 0.5
 
def foo_2(x=5, y=10):
    """
    Returns x if x > y, else return y
    """
    if x > y:
        return x
    return y

def foo_3(x=10, y=7, z=4):
    """
    Rearranges x, y, z in ascending order
    """
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

def foo_4(x=5):
    """
    Returns factorial of x
    """
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo_5(x=6): 
    """
    A recursive function that calculates the factorial of x
    """
    if x == 1:
        return 1
    return x * foo_5(x-1)

def foo_6(x=4):
    """
    Calculate the factorial of x in a different way
    """
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

def main(argv):
    """
    Prints each of the function with arguments provided
    """
    print(foo_1(25))
    print(foo_2(20, 25))
    print(foo_3(2, 20, 15))
    print(foo_4(7))
    print(foo_5(7))
    print(foo_6(7))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
5.0
25
[2, 15, 20]
5040
5040
5040

**********************************************************************

Code ran without errors

Time consumed = 0.10517s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Some functions exemplifying the use of control statements
"""

__appname__ = '[test_control_flow.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## Imports ##
import sys # module to interface our program with the operating system
import doctest # import the doctest module

## Constants ##


## Functions ##
def even_or_odd(x=0): # if not specified, x should take value 0
    """
    Find whether a number x is even or odd.

    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd!'

    whenever a float is provided, then the closest integer is used:
    >>> even_or_odd(3.2)
    '3 is Odd!'

    in case of negative numbers, the positive is taken:
    >>> even_or_odd(-2)
    '-2 is Even!'

    """
    # Define function to be tested
    if x % 2 == 0: # the conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def main(argv):
    """
    Prints each of the function with given argument
    """
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    # sys.exit(status)
# Can suppress the block of code containing def main() and if 
# (__name__ == "__main__") because you don't want/need to unit test that section
# of the output

doctest.testmod() # To run with embedded tests
**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!

**********************************************************************

Code ran without errors

Time consumed = 0.21599s

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script illustrates the manipulation of csv files
"""

__appname__ = '[basic_csv.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'

import csv
# Read a file containing:
# 'Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)'
f = open('../Data/testcsv.csv', 'r')

csvread = csv.reader(f)
temp = []
for row in csvread:
    temp.append(tuple(row))
    print(row)
    print("the species is", row[0])

f.close()

# Write a file containing only species name and Body mass
f = open('../Data/testcsv.csv', 'r')
g = open('../Data/bodymass.csv', 'w')

csvread = csv.reader(f)
csvwrite = csv.writer(g)
for row in csvread:
    print(row)
    csvwrite.writerow([row[0], row[4]])

f.close()
g.close()
**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
the species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
the species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
the species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
the species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.10758s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Example of debugging on a script
"""

__appname__ = '[debugme.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = ""

## Functions ##

def buggyfunc(x):
    """
    Buggy function for debugging
    """
    y = x
    for i in range(x):
        y = y-1
        z = x/y
    return z

buggyfunc(20)
**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "debugme.py", line 24, in <module>
    buggyfunc(20)
  File "debugme.py", line 21, in buggyfunc
    z = x/y
ZeroDivisionError: division by zero

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script that takes DNA sequences as input from a single external file and 
aligns two DNA sequences such that they are as similar as possible. The best 
alignment, along with its corresponding score is then saved in a text file to 
the /Results/ directory. 
Also for practicing debugging via insertion of breakpoints

Script starts by positioning the beginning of the shorter sequence at all 
positions (bases) of the longer one (the start position), and count the number 
of bases matched. The alignment with the highest score wins. Ties are possible, 
in which case, an arbitrary alignment (e.g. first or last) with the highest 
score is taken.
"""

__appname__ = '[align_seqs.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = ""

## Imports ##
import sys # module to interface our program with the operating system
import csv # module to read csv files

## Constants ##

# Open csv file for reading
file1 = open('../Data/sequence.csv', 'r')

# Read csv file
sequences = csv.reader(file1)

# Populate seqlist, a list with the sequences read from sequence.csv
seqlist = []
for row in sequences:
    seqlist.append(row[0])

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(seqlist[0])
l2 = len(seqlist[1])
if l1 >= l2:
    s1 = seqlist[0]
    s2 = seqlist[1]
else:
    s1 = seqlist[1]
    s2 = seqlist[0]
    l1, l2 = l2, l1 # swap the two lengths

# for finding the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

## Functions ##

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    """
    Computes a score by returning the number of matches starting from an 
    arbitrary startpoint (chosen by user)

        Parameters:
            s1 (str): string containing the longer sequence
            s2 (str): string containing the shorter sequence
            l1 (int): length of s1
            l2 (int): length of s2
            startpoint: arbitrary startpoint chosen by user

        Returns:
            score (int): number of matches between the sequences
            matched (str): matched string with * as match and - as no match

    """
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 

print(my_best_align)
print(s1)
print("Best score:", my_best_score)

# Save output to a text file in /Results/ directory
sys.stdout = open('../Results/align_seqs_out.txt', 'w')
print("Best align is:", str(my_best_align))
print("Best score is:", str(my_best_score))
sys.stdout.close()
**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTCGGAT
ATCGCCGGATTACGGG
5
 
........------**
........CAATTCGGAT
ATCGCCGGATTACGGG
2
 
.........--*---*
.........CAATTCGGAT
ATCGCCGG
**********************************************************************

Code ran without errors

Time consumed = 0.10970s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
argv is the 'argument variable'. Such variables are necessarily very common
across programming languages, and play an important role - argv is a variable 
that holds the arguments passed to the script when it's ran.
"""

__appname__ = '[sysargv.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk'
__version__ = '0.0.1'
__license__ = ""

## Imports ##
import sys

## Functions ##
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("othe arguments are: " , str(sys.argv))

**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
othe arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.09697s

======================================================================
Inspecting script file scope.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Variables inside functions are invisible outside of it, nor do they persist once
the function has run. These are called local variables, and are only accessible 
inside their function. However, "global variables" are visible inside and outside
of functions.
"""

__appname__ = '[scope.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'

_a_global = 10 # a global variable

if _a_global >= 5:
    _b_global = _a_global + 5 # also a global variable

def a_function():
    """
    Defines three local variables, one of which is within a conditional
    """
    _a_global = 5 # a local variable

    if _a_global >= 5:
        _b_global = _a_global + 5 # also a local variable

    _a_local = 4

    print("Inside the function, the value of _a_global is ", _a_global)
    print("Inside the function, the value of _b_global is ", _b_global)
    print("Inside the function, the value of _a_local is ", _a_local)

    return None # good practice to explicitly return None if no return specified

a_function()

print("Outside the function, the value of _a_global is ", _a_global)
print("Outside the function, the value of _b_global is ", _b_global)

_a_global = 10

def a_function():
    """
    Defines a local variable
    """
    _a_local = 4

    print("Inside the function, the value of _a_local is ", _a_local)
    print("Inside the function, the value of _a_global is ", _a_global)

    return None

a_function()

print("Outside the function, the value of _a_global is ", _a_global)


# To modify or assign a global variable from inside a function, use "global"

_a_global = 10
print("Outside the function, the value of _a_global is", _a_global)

def a_function():
    """
    Defines two variables, one global and one local
    """
    global _a_global
    _a_global = 5
    _a_local = 4

    print("Inside the function, the value of _a_global is ", _a_global)
    print("Inside the function, the value of _a_local is ", _a_local)

    return None

a_function()

print("Outside the function, the value of _a_global now is ", _a_global)

# global keyword also works from inside nested functions, but it can be slightly
# confusing

def a_function():
    """
    Contains a variable and a nested function which globalizes the variable and 
    changes its value
    """
    _a_global = 10

    def _a_function2():
        """
        globalizes the variable and changes its value
        """
        global _a_global
        _a_global = 20

    print("Before calling a_function, value of _a_global is ", _a_global)

    _a_function2()

    print("After calling _a_function2, value of _a_global is ", _a_global)

    return None

a_function()

print("The value of _a_global in main workspace / namespace is ", _a_global)

# Compare above with below

_a_global = 10

def a_function():
    """
    A function with a nested function to change a global variable
    """
    def _a_function2():
        """
        Globalizes a variable and change its value
        """
        global _a_global
        _a_global = 20

    print("Before calling a_function, value of _a_global is ", _a_global)

    _a_function2()

    print("After calling _a_function2, value of _a_global is ", _a_global)

a_function()

print("The value of _a_global in main workspace / namespace is ", _a_global)
**********************************************************************

Testing scope.py...

scope.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
Inside the function, the value of _a_global is  5
Inside the function, the value of _b_global is  10
Inside the function, the value of _a_local is  4
Outside the function, the value of _a_global is  10
Outside the function, the value of _b_global is  15
Inside the function, the value of _a_local is  4
Inside the function, the value of _a_global is  10
Outside the function, the value of _a_global is  10
Outside the function, the value of _a_global is 10
Inside the function, the value of _a_global 
**********************************************************************

Code ran without errors

Time consumed = 0.08234s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
(1) Write three separate list comprehensions that create three different
lists containing the latin names, common names and mean body masses for
each species in birds, respectively. 

(2) Now do the same using conventional loops (you can choose to do this 
before 1 !). 
"""

__appname__ = '[lc1.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = ""

## Imports ##
import sys

## Constants ##

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

## Functions ##

def latin_names_loop(x = birds):
    """
    Populates a list with latin names using a for loop
    """
    latin_names = []
    for row in x:
        latin_names.append(row[0])
    return latin_names

def common_names_loop(x = birds):
    """
    Populates a list with common names using a for loop
    """
    common_names = []
    for row in x:
        common_names.append(row[1])
    return common_names

def masses_loop(x = birds):
    """
    Populates a list with masses using a for loop
    """
    masses = []
    for row in x:
        masses.append(row[2])
    return masses

def latin_names_lc(x = birds):
    """
    Populates a list with latin names using list comprehension
    """
    latin_names = [row[0] for row in x]
    return latin_names

def common_names_lc(x = birds):
    """
    Populates a list with common names using list comprehension
    """
    common_names = [row[1] for row in x]
    return common_names

def masses_lc(x = birds):
    """
    Populates a list with masses using list comprehension
    """
    masses = [row[2] for row in x]
    return masses

def main(argv):
    """
    Prints each of the functions with argument birds
    """
    print(latin_names_loop(birds))
    print(common_names_loop(birds))
    print(masses_loop(birds))
    print(latin_names_lc(birds))
    print(common_names_lc(birds))
    print(masses_lc(birds))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.07485s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script is used to illustrate '__name__ == "__main__"'
This line directs the python interpreter to set the special __name_ variable to
have a value "__main__", so that the file is usable as a script as well as an 
importable module.
On the other hand, if some other module is the main program and your module is 
being imported, the interpreter looks at the filename of your module, strips off
the .py and assigns that string to the module's __name__ variable instead, 
skipping the command(s) under the if statement.
"""

__appname__ = '[using_name.py]'
__author__ = 'Yewshen Lim (y.lim20@imperial.ac.uk'
__version__ = '0.0.1'
__license__ = ""

## Functions ##
if __name__ == "__main__":
    print("This program is being run by itself")
else:
    print("I am being imported from another module")

print("This module's name is: " + __name__)
**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
This program is being run by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.10241s

======================================================================
======================================================================
Finished running scripts

Ran into 5 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!