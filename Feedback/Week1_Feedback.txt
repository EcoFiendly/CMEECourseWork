Starting weekly feedback for Yew Shen, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.45 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, Feedback, Week1, Week2

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
# Whitelist
!.gitkeep
!README.md
!.gitignore
!/Code

# Blacklist
*~
*.tmp
#comment
*.py[co]
Sandbox
Week1/Results/*
.vscode
*.pdf
*~
*.aux
*.dvi
*.log
*.nav
*.out
*.snm
*.toc

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE Coursework Repository

*Author: Yewshen Lim*

*Created: Oct 2020*

This repository contains all the work attempted by Yewshen within "The Multilingual Quantitative Biologist" book which is taught in the first term of the CMEE Course.

Visitors who wish to attempt the coursework can refer to https://mhasoba.github.io/TheMulQuaBio/intro.html

Each individual subdirectory will contain their own READMEs detailing the contents within the week. Also located within each subdirectories are another 3 subdirectories /Code, /Results and /Data. /Code contains the scripts, /Results contains the output from the scripts and /Data contains input files for the scripts. One point to highlight is that if input files are only manipulated (e.g. changing file type and/or replacing separators), the output remains in /Data. Outputs are only directed to /Results when the input files were processed (e.g. generating a graph from a dataset).

## Table of Contents
1. Week 1: UNIX and Linux, shell scripting, git and Latex
2. Week 2: Biological Computing in Python:w


**********************************************************************

======================================================================
Looking for the weekly directories...

Found 2 weekly directories: Week1, Week2

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: Data, Code, Results, Sandbox

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Week 1

*Author: Yewshen Lim*

*Created: Week 1*

This directory contains the scripts, data and results from week 1.

Languages used in this week:
1. Bash
2. LaTeX

Requirements:
1. A terminal running bash
2. LaTeX
3. imagemagick

## Scripts

### 1. UnixPrac1.txt

Text file containing commands to perform various operations on fasta files in the /Data directory

### 2. boilerplate.sh

First shell script. Contains sections of code that have to be included in many places with little or no alteration

### 3. tabtocsv.sh

Shell script which substitutes the tabs in the files with commas and saves the output into a .csv file

### 4. variables.sh

Shell script showing how to assign variables

### 5. MyExampleScript.sh

Another shell script showing how to assign variables

### 6. CountLines.sh

Shell script counting the number of lines in the input file

### 7. ConcatenateTwoFiles.sh

Shell script that concatenates two input files into one output file

### 8. tiff2png.sh

Shell script that converts a tiff file into a png file using imagemagick

### 9. csvtospace.sh

Shell script that converts csv files into space separated values files

### 10. FirstExample.tex

.tex file that contains the first example on how to use LaTex

### 11. FirstBiblio.bib

.bib file that contains the BibTeX references

### 12. CompileLaTeX.sh

Shell script that automates the process of compiling .tex and .bib files into a pdf and cleans up the extra files generated during the process.
**********************************************************************

Results directory is empty - good! 

Found 12 code files: ConcatenateTwoFiles.sh, tiff2png.sh, UnixPrac1.txt, variables.sh, CountLines.sh, FirstBiblio.bib, csvtospace.sh, CompileLaTeX.sh, boilerplate.sh, FirstExample.tex, tabtocsv.sh, MyExampleScript.sh

======================================================================
Testing script/code files...

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Yewshen Lim y.lim20@imperial.ac.uk
# Script: ConcatenateTwoFiles.sh
# Description: concatenate two separate files into one
# Arguments: first file, second file, resulting file
# Date: Oct 2020

# Check if arguments are provided
if [ "$1" == "" ] || [ "$2" == "" ] || [ "$3" == "" ]
then
    echo "Please provide two input files and name of the output file"
else
    cat $1 > $3 # concatenate and print $1, then redirected into $3
    cat $2 >> $3 # concatenate and print $2, then redirected into $3
    echo "Merged file is $3"
    cat $3 # concatenate and print $3
    echo
    echo "Moving $3 to ../Data/"
    mv $3 ../Data/ # move $3 to Data directory
fi
exit

**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 


**********************************************************************
Please provide two input files and name of the output file

**********************************************************************

Code ran without errors

Time consumed = 0.00617s

======================================================================
Inspecting script file tiff2png.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Yewshen Lim y.lim20@imperial.ac.uk
# Script: tiff2png.sh
# Desc: converts the provided tiff file to png file
# Arguments: 1 tiff file 
# Date: Oct 2020

if [ "$1" == "" ] # check if an argument is provided
then
    echo "Please enter a tiff file and its path as a cli argument"
elif [[ "$1" != *.tif ]] # check if argument provided is the right file type
then
    echo "Please enter a tiff file"
else
    # If tiff file was provided
    for f in $1;
        do
            echo "Converting $f";
            out="${f%tif}png" # replace "tif" with "png"
            convert "$f" "$out"; # imagemagick command to convert file
            echo "Moving output to ../Data/"
            mv $out ../Data/ # moves output to Data directory
            echo "Done!"
        done
fi
exit

# another way of writing to consider:
#if [ -f *.tif ]; # looks for tiff files in directory
#then 
#    for f in *.tif # for loop to convert the file
#    do
#        echo "Converting $f"
#        convert "$f"  "$(basename "$f" .tif).jpg"
#    done
#else # if no tiff files
#    echo "There is no .tif file in this directory"
#    exit
#fi
#exit
**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 


**********************************************************************
Please enter a tiff file and its path as a cli argument

**********************************************************************

Code ran without errors

Time consumed = 0.00623s

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:

**********************************************************************
# Author: Yewshen Lim y.lim20@imperial.ac.uk
# Script: UnixPractical.txt
# Desc: Bash commands to count lines, sequence and base pair ratios. 
# Arguments: none
# Date: Oct 2020

#1 Count how many lines there are in each file

find ../Data/ -type f -name "*.fasta" -exec wc -l {} \;

#2 Print everything starting from the second line for the E. coli genome

tail -n +2 ../Data/E.coli.fasta

#3 Count the sequence length of this genome

tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | wc -m

#4 Count the matches of a particular sequence, "ATGC" in the genome of E. coli 
# (hint: Start by removing the first line and removing newline characters)

tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | grep -o "ATCG" | wc -l

#5 Compute the AT/GC ratio. That is, the (A+T)/(G+C) ratio. This is a summary 
# measure of base composition of double-stranded DNA. DNA from different 
# organisms and lineages has different ratios of the A-to-T and G-to-C base 
# pairs. For example DNA from organisms that live in hot springs have a higher 
# GC content, which takes advantage of the increased thermal stability of the 
# GC base pair (google "Chargaff's rule").

echo $(tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | grep -o "A\|T" | wc -l) / $(tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | grep -o "G\|C" | wc -l) | bc -l
**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file variables.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Yewshen Lim y.lim20@imperial.ac.uk
# Script: variables.sh
# Desc: examples of assignments
# Arguments: MyVar
# Date: Oct 2020

# Shows the use of variables
# assign value to MyVar
MyVar='some string' 
echo 'the current value of the variable is' $MyVar
echo 'Please enter a new string'
read MyVar
echo 'the current value of the variable is' $MyVar


## Reading multiple values
echo 'Enter two numbers sepaarated by spaces(s)'
read a b
echo 'you entered' $a 'and' $b '. Their sum is:'
mysum=`expr $a + $b`
echo $mysum

**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 


**********************************************************************
the current value of the variable is some string
Please enter a new string
the current value of the variable is
Enter two numbers sepaarated by spaces(s)
you entered and . Their sum is:


**********************************************************************

Encountered error (or warning):
expr: syntax error: missing argument after ‘+’

======================================================================
Inspecting script file CountLines.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Yewshen Lim y.lim20@imperial.ac.uk
# Script: CountLines.sh
# Description: Count the number of lines present in the file provided 
# Arguments: 1 file
# Date: Oct 2020

# Check if a file is provided
if [ "$1" == ""]
then
    echo "Please provide a file and its path as a cli argument"
else
    # if a file is provided
    NumLines=`wc -l < $1` 
    # wc -l counts the number of lines
    # < redirects the contents of the file to the stdin of command wc -l
    echo "The file $1 has $NumLines lines"
    echo # returns an empty line for readability
fi
exit
**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 


**********************************************************************
The file  has  lines


**********************************************************************

Encountered error (or warning):
CountLines.sh: line 9: [: : unary operator expected
CountLines.sh: line 14: $1: ambiguous redirect

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:

**********************************************************************
@article{einstein1905does,
  title={Does the inertia of a body depend upon its energy-content},
  author={Einstein, Albert},
  journal={Ann Phys},
  volume={18},
  pages={639--641},
  year={1905}
}

**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file csvtospace.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Yewshen Lim y.lim20@imperial.ac.uk
# Script: csvtospace.sh
# Description: takes csv files and converts it to space separated values file 
#
# Saves the output into a .txt file
# Arguments: 1 csv file
# Date: Oct 2020

if [ "$1" == "" ] # Check if an argument is provided
then
    echo "Please enter a csv file and its path as a cli argument"
elif [[ "$1" != *.csv ]] # check if argument provided is the right file type
then
    echo "Please enter a csv file"
else
    # If a csv file is provided
    echo "Creating a space separated version of $1"
    out="${1%csv}txt" # replace "csv" with "txt"
    cat $1 | tr -s "," " " >> $out # substitutes commas with spaces
    echo "Moving output to ../Data"
    mv $out ../Data/ # moves output to Data directory
    echo "Done!"
fi
exit

# This block of code prompts user for a directory where the csv files are located
# 
# if [ "$1" == "" ] # check if argument was provided
# then
#     echo "Enter relative path where csv files are located:"
#     read PathVar # assigns argument as variable
#     for f in $PathVar/*.csv; # for loop looks for .csv files in directory
#         do
#             echo "Creating space separated versions of $f";
#             out="${f%csv}txt" # replace "csv" with "txt"
#             cat $f | tr -s "," " " >> $out # substitute commas with space and saves to output file
#             echo "Moving output to ../Data/"
#             mv $out ../Data/ # moves output to Data directory
#             echo "Done!"
#         done
#     exit
# fi
**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 


**********************************************************************
Please enter a csv file and its path as a cli argument

**********************************************************************

Code ran without errors

Time consumed = 0.00583s

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Yewshen Lim y.lim20@imperial.ac.uk
# Script: CompileLaTeX.sh
# Description: Compiles the given LaTeX file and generates a pdf output
# Arguments: 1 LaTeX file
# Date: Oct 2020

if [ "$1" == "" ] # Check if an argument is provided
then
    echo "Please provide a LaTeX file (without the extension) and its relative path" 
else
    echo "Compiling ..."
    pdflatex $1.tex
    pdflatex $1.tex
    bibtex $1
    pdflatex $1.tex
    pdflatex $1.tex
    #evince $1.pdf & # Samraat uses evince, line can be suppressed

    ## Cleanup
    rm *~
    rm *.aux
    rm *.dvi
    rm *.log
    rm *.nav
    rm *.out
    rm *.snm
    rm *.toc
    rm *.bbl
    rm *.blg
    rm *.fls

    echo "Done!"
fi
exit
**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 


**********************************************************************
Please provide a LaTeX file (without the extension) and its relative path

**********************************************************************

Code ran without errors

Time consumed = 0.00676s

======================================================================
Inspecting script file boilerplate.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Yewshen Lim y.lim20@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2020

echo -e "\nThis is a shell script! \n"
# what does -e do?
# -e enables interpretation of backslash escapes

#exit

**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 


**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00881s

======================================================================
Inspecting script file FirstExample.tex...

File contents are:

**********************************************************************
\documentclass[12pt]{article}

\title{A Simple Document}

\author{Yewshen Lim}

\date{}

\begin{document}
    \maketitle

    \begin{abstract}
        This paper must be cool!
    \end{abstract}

    \section{Introduction}
        Blah Blah!

    \section{Materials \& Methods}
    One of the most famous equation is:
    \begin{equation}
        E = mc^2
    \end{equation}
    This equation was first proposed by Einstein in 1905
    \cite{einstein1905does}.

    \bibliographystyle{plain}
    \bibliography{FirstBiblio}
\end{document}

**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Yewshen Lim y.lim20@imperial.ac.uk
# Script: tabtocsv.sh
# Description: substitute the tabs with commas in the file provided 
#
# Saves the output into a .csv file
# Arguments: 1 tab delimited file
# Date: Oct 2020

if [ "$1" == "" ] # check if an argument is provided
then
    echo "Please enter a tab separated file and its path as a cli argument"
elif [[ "$1" != *.txt ]] # check if argument provided is the right file type
then
    echo "Please enter a txt file"
else
    # If a txt file is provided
    echo "Creating a comma delimited version of $1 ..."
    out="${1%txt}csv" # replace "txt" with "csv"
    cat $1 | tr -s "\t" "," >> $out # substitute tabs with commas, and saves to output file
    echo "Moving output to ../Data/"
    mv $out ../Data/ # moves output to Data directory
    echo "Done!"
fi
exit
**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 


**********************************************************************
Please enter a tab separated file and its path as a cli argument

**********************************************************************

Code ran without errors

Time consumed = 0.01420s

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Yewshen Lim y.lim20@imperial.ac.uk
# Script: MyExampleScript.sh
# Description: Two ways to assign variables
# Arguments: None
# Date: Oct 2020

msg1="Hello"
msg2=$USER
echo "$msg1 $msg2"
echo "Hello $USER"
echo

**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 


**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00767s

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!